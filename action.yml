name: 'Generate access token'
description: 'Generate access token'
inputs:
  script:
    description: 'Python script for generate access token stored in repo/org secrets.'
    required: false
    default: "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoKaW1wb3J0IGp3dAppbXBvcnQgdGltZQppbXBvcnQgc3lzCmltcG9ydCByZXF1ZXN0cwppbXBvcnQganNvbgppbXBvcnQgb3MKCgpQRU1fRklMRSA9ICIuL2doX2FwcF9wcml2X2tleS5wZW0iCkdIX0FQUF9JRCA9IG9zLmVudmlyb25bJ0dIX0FQUF9JRCddCkdIX0FQUF9JTlNUQUxMQVRJT05fSUQgPSBvcy5lbnZpcm9uWydHSF9BUFBfSU5TVEFMTEFUSU9OX0lEJ10KCiMgT3BlbiBQRU0Kd2l0aCBvcGVuKFBFTV9GSUxFLCAncmInKSBhcyBwZW1fZmlsZToKICAgIHNpZ25pbmdfa2V5ID0gand0Lmp3a19mcm9tX3BlbShwZW1fZmlsZS5yZWFkKCkpCgpwYXlsb2FkID0gewogICAgIyBJc3N1ZWQgYXQgdGltZQogICAgJ2lhdCc6IGludCh0aW1lLnRpbWUoKSksCiAgICAjIEpXVCBleHBpcmF0aW9uIHRpbWUgKDEwIG1pbnV0ZXMgbWF4aW11bSkKICAgICdleHAnOiBpbnQodGltZS50aW1lKCkpICsgNjAwLAogICAgIyBHaXRIdWIgQXBwJ3MgaWRlbnRpZmllcgogICAgJ2lzcyc6IEdIX0FQUF9JRAp9CgojIENyZWF0ZSBKV1QKand0X2luc3RhbmNlID0gand0LkpXVCgpCmVuY29kZWRfand0ID0gand0X2luc3RhbmNlLmVuY29kZShwYXlsb2FkLCBzaWduaW5nX2tleSwgYWxnPSdSUzI1NicpCgojIEdldCBnaCBhY2Nlc3MgdG9rbmUKaGVhZGVycyA9IHsiQXV0aG9yaXphdGlvbiI6IGYiQmVhcmVyIHtlbmNvZGVkX2p3dH0iLAogICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yitqc29uIiwKICAgICAgICAgICAiWC1HaXRIdWItQXBpLVZlcnNpb24iOiAiMjAyMi0xMS0yOCIKICAgICAgICAgICB9CnVybCA9IGYiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9hcHAvaW5zdGFsbGF0aW9ucy97R0hfQVBQX0lOU1RBTExBVElPTl9JRH0vYWNjZXNzX3Rva2VucyIKCnIgPSByZXF1ZXN0cy5wb3N0KHVybCwgaGVhZGVycz1oZWFkZXJzKQppZiByLnN0YXR1c19jb2RlICE9IDIwMToKICAgIHJhaXNlIElPRXJyb3IoZiJFcnJvcjoge3Iuc3RhdHVzX2NvZGV9LiBGaW5kIG1vcmUgaGVyZTogaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vcmVzdC9hcHBzL2FwcHM/YXBpVmVyc2lvbj0yMDIyLTExLTI4I2NyZWF0ZS1hbi1pbnN0YWxsYXRpb24tYWNjZXNzLXRva2VuLWZvci1hbi1hcHAiKQplbHNlOgogICAgcmVzcG9uc2VfanNvbiA9IHIuanNvbigpCiAgICBwcmludChyZXNwb25zZV9qc29uWyd0b2tlbiddKQo="
  gh_app_priv_key:
    description: 'GitHub Application private key'
    required: true
  gh_app_id:
    description: 'GitHub Application ID'
    required: true
  gh_app_installation_id:
    description: 'GitHub Application intallation ID'
    required: true
  base64:
    description: 'Use base64 to encrypt token.'
    default: 'false'
    required: false
outputs:
  token:
    value: ${{ steps.accessToken.outputs.GH_ACCESS_TOKEN_1H_EXPIRATION}}
runs:
  using: "composite"
  steps:
    - id: accessToken
      run: |
        set -e
        python3 --version
        
        if [[ $(uname -a) == *"Linux"*]]
        then
          [[ $(lsb_release -a) == *"20.04"* ]] && python3 -m pip install pyopenssl --upgrade
        fi
        python3 -m pip install jwt requests
        echo ${GH_APP_RELEASECREATOR_TOKEN_PYTHON_SCRIPT} | base64 -d > ./generate_gh_app_installation_token.py
        echo ${GH_APP_RELEASECREATOR_PRIV_KEY} | base64 -d > ./gh_app_priv_key.pem
        export GH_ACCESS_TOKEN_1H_EXPIRATION=$( python3 ./generate_gh_app_installation_token.py )
        if [[ ${IS_BASE64} == 'true' ]]; then
          echo "GH_ACCESS_TOKEN_1H_EXPIRATION=$( echo ${GH_ACCESS_TOKEN_1H_EXPIRATION} | base64 )" >> "$GITHUB_OUTPUT"
        else
          echo "GH_ACCESS_TOKEN_1H_EXPIRATION=${GH_ACCESS_TOKEN_1H_EXPIRATION}" >> "$GITHUB_OUTPUT"
        fi
        rm ./gh_app_priv_key.pem ./generate_gh_app_installation_token.py
        echo "Access token is ready."
      env:
        GH_APP_RELEASECREATOR_TOKEN_PYTHON_SCRIPT: ${{ inputs.script }}
        GH_APP_RELEASECREATOR_PRIV_KEY: ${{ inputs.gh_app_priv_key }}
        GH_APP_ID: ${{ inputs.gh_app_id }}
        GH_APP_INSTALLATION_ID: ${{ inputs.gh_app_installation_id }}
        IS_BASE64: ${{ inputs.base64 }}
      shell: bash
