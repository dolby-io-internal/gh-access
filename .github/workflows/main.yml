name: 'Test gh-access'

on:
  push:
    branches:
    pull_request:
    tags:

env:
  USE_RELEASE_NOTES_FROM_FILE: 'false'


jobs:
  generate_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            action_shell: bash
            python_version: '3.11'

          - os: macos-latest
            action_shell: bash
            python_version: '3.11'

          - os: windows-latest
            action_shell: powershell
            python_version: '3.11'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Generate token'
        id: accessToken
        uses: ./
        with:
          gh_app_priv_key: ${{ secrets.PEM_B64 }}
          gh_app_id: ${{ secrets.GH_APP_ID }}
          gh_app_installation_id: ${{ secrets.GH_APP_INSTALLATION_ID }}
          action_shell: ${{ matrix.action_shell }}

      - name: 'Check access token - ${{ matrix.os }}'
        run: ./tests.py
        env:
          ACCESS_TOKEN: ${{ steps.accessToken.outputs.token }}

  deploymen_production:
      needs: generate_and_test
      if: |
        success() &&
        github.event_name != 'pull_request' &&
        startsWith(github.ref, 'refs/tags/v')
      environment:
        name: production
        url: ${{ vars.ENV_RELEASE_URL }}
      runs-on: ubuntu-latest
      steps:
        - name: 'Checkout the code'
          uses: actions/checkout@v4
        - name: 'Generate access token'
          id: accessToken
          uses: ./
          with:
            gh_app_priv_key: ${{ secrets.PEM_B64 }}
            gh_app_id: ${{ secrets.GH_APP_ID }}
            gh_app_installation_id: ${{ secrets.GH_APP_INSTALLATION_ID }}
            action_shell: 'bash'
        - name: 'Prepare release notes'
          id: releaseNotes
          run: |
            if [[ -f ${{ github.workspace }}/RELEASE_NOTES.md && ${{ env.USE_RELEASE_NOTES_FROM_FILE }} == 'true' ]];then
              export RELEASE_NOTES=$( cat ${{ github.workspace }}/RELEASE_NOTES.md )
            else
              export RELEASE_NOTES="Generated Access Token v${VERSION}"
            fi
            echo "RELEASE_NOTES=${RELEASE_NOTES}" >> "${GITHUB_OUTPUT}"
        - name: 'Define release type'
          id: 'releaseType'
          run: |
            IS_DRAFT=fasle
            IS_PRERELEASE=false
            if [[ ${REF_NAME} == *"alpha"* || ${REF_NAME} == *"beta"* ]];then
              export IS_PRERELEASE=true
            fi
            echo "IS_DRAFT=${IS_DRAFT}" >> "${GITHUB_OUTPUT}"
            echo "IS_PRERELEASE=${IS_PRERELEASE}" >> "${GITHUB_OUTPUT}"
          env:
            REF_NAME: ${{ github.ref_name }}
        - name: 'Create release - production'
          uses: ./.github/actions/release
          with:
            deployment: ${{ vars.ENV_DEPLOYMENT }}
            release_tag: ${{ github.ref_name }}
            release_repository: ${{ github.repository }}
            access_token: ${{ steps.accessToken.outputs.token }}
            release_notes: ${{ steps.releaseNotes.outputs.RELEASE_NOTES }}
            is_prerelease: ${{ steps.releaseType.outputs.IS_PRERELEASE }}
            is_draft: ${{ steps.releaseType.outputs.IS_DRAFT }}
